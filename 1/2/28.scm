(define (square x) (* x x))

(define (miller-rabin-expmod base exp m)
  (define (check candidate)
    (define (check-nontrivial candidate square)
      (if (and (not (= candidate 1))
               (not (= candidate (- m 1)))
               (= square 1))
          0
          square))
    (check-nontrivial candidate (remainder (square candidate) m)))
  (cond ((= exp 0) 1)
        ((even? exp) (check (miller-rabin-expmod base (/ exp 2) m)))
        (else (remainder (* base (miller-rabin-expmod base (- exp 1) m))
                         m))))

(define (miller-rabin-test n)
  (define (try-it a)
    (define (check-it x)
      (and (not (= x 0)) (= x 1)))
    (check-it (miller-rabin-expmod a (- n 1) n)))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (prime? n)
  (fast-prime? n 100))

(prime? 2)
(prime? 3)
(prime? 4)
(prime? 5)
(prime? 560)
(prime? 561)
(prime? 1105)
(prime? 1729)
(prime? 2465)
(prime? 2821)
(prime? 6601)
(prime? 6602)
